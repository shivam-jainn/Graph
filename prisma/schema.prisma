generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  assistant
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String     @unique
  emailVerified  Boolean    @default(false)
  image          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  accounts       Account[]
  session   Session[]  
  sources        Source[]
  chatSessions       ChatSession[]

  @@map("user")
}



model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


model Source {
  id          String             @id @default(cuid())
  title       String
  filePath    String
  fileType    String
  user        User               @relation(fields: [userId], references: [id])
  userId      String
  sessions    ChatSession[]      @relation("SessionSources")
  messageRefs MessageSourceRef[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model ChatSession {
  id          String        @id @default(cuid())
  title       String?
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  messages    ChatMessage[]
  sources     Source[]      @relation("SessionSources")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ChatMessage {
  id          String             @id @default(cuid())
  sessionId   String
  session     ChatSession        @relation(fields: [sessionId], references: [id])
  content     String
  role        Role
  sourceRefs  MessageSourceRef[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model MessageSourceRef {
  id         String       @id @default(cuid())
  messageId  String
  sourceId   String
  page       Int?
  snippet    String?

  message    ChatMessage  @relation(fields: [messageId], references: [id])
  source     Source       @relation(fields: [sourceId], references: [id])
}
